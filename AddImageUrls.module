<?php namespace ProcessWire;

/**
 *
 * Add Image URLs
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class AddImageUrls extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => "Add Image URLs",
			'summary' => 'Allows images/files to be added to Image/File fields by pasting URLs.',
			'version' => '0.2.0',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/AddImageUrls',
			'icon' => 'picture-o',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.0',
		);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookAfter('InputfieldFile::render', $this, 'modifyInputfield');
		$this->addHookBefore('ProcessPageEdit::execute', $this, 'addDependencies');
		$this->addHookAfter('ProcessPageEdit::processInput', $this, 'processInput');
	}

	/**
	 * Modify inputfield
	 *
	 * @param HookEvent $event
	 */
	protected function modifyInputfield(HookEvent $event) {
		// Only for ProcessPageEdit or ProcessUser
		if($this->process != 'ProcessPageEdit' && $this->process != 'ProcessUser') return;

		$inputfield = $event->object;
		$is_image_inputfield = $inputfield instanceof InputfieldImage;
		$out = $event->return;
		$page = $inputfield->hasPage;
		$field = $inputfield->hasField;

		$button_text = $this->_('Paste URLs');
		if($is_image_inputfield) {
			$placeholder_text = $this->_('Paste URLs to images here, one per line…');
		} else {
			$placeholder_text = $this->_('Paste URLs to files here, one per line…');
		}

		$button = "<button class='url-upload-toggle ui-button ui-widget ui-corner-all ui-state-default ui-priority-secondary'><span class='ui-button-text'><i class='fa fa-clipboard'></i> $button_text</span></button>";
		$find = array("<span class='InputfieldImageValidExtensions", "<span class='InputfieldFileValidExtensions");
		$replace = array("$button<span class='InputfieldImageValidExtensions", "$button<span class='InputfieldFileValidExtensions");
		$out = str_replace($find, $replace, $out);
		$out .= "
<div class='url-upload-container'>
<textarea name='urlUpload*{$field->name}*{$page->id}' rows='2' placeholder='$placeholder_text'></textarea>
</div>
";
		$event->return = $out;
	}

	/**
	 * Add JS and CSS dependencies
	 *
	 * @param HookEvent $event
	 */
	protected function addDependencies(HookEvent $event) {
		// Return if ProcessPageEdit is being loaded via AJAX
		if($this->config->ajax) return;

		// Add JS and CSS dependencies
		$config = $this->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->scripts->add($config->urls->{$this} . "{$this}.js?v={$version}");
		$config->styles->add($config->urls->{$this} . "{$this}.css?v={$version}");
	}

	/**
	 * Process URLs in $input
	 *
	 * @param HookEvent $event
	 */
	protected function processInput(HookEvent $event) {

		$form = $event->arguments(0);
		// Only for main Page Edit form
		if($form->name !== 'ProcessPageEdit') return;

		foreach($this->input->post as $key => $value) {

			// Ignore unrelated input
			if(substr($key, 0, 9) !== 'urlUpload' || empty($value)) continue;

			// Get variables from key name
			list($junk, $field_name, $page_id) = explode('*', $key);
			$field_name = $this->sanitizer->fieldName($field_name);
			$page = $this->pages->get((int) $page_id);
			$field = $this->fields->get($field_name);
			$is_image_field = $field->type instanceof FieldtypeImage;
			$field_value = $page->getUnformatted($field_name);

			// Skip if the user does not have edit access for the page and field
			$editable = false;
			if($page instanceof RepeaterPage) {
				// Check field and Repeater field are editable
				if(!$field->useRoles || $field->editable()) {
					$repeater_field = $page->getForField();
					if(!$repeater_field->useRoles || $repeater_field->editable()) $editable = true;
				}
			} else {
				// Check page and field are editable
				if($page->editable($field_name)) $editable = true;
			}
			if(!$editable) {
				$this->error( $this->_('You do not have permission to edit this field.') );
				continue;
			}

			// How many more uploads allowed?
			if($field->maxFiles == 1) {
				$remaining_uploads = 1; // Single image/file field is allowed to be overwritten
			} elseif($field->maxFiles) {
				$remaining_uploads = $field->maxFiles - count($field_value);
			} else {
				$remaining_uploads = 9999;
			}

			// Determine allowed extensions
			$allowed_extensions = explode(' ', $field->extensions);

			// Get array of URLs
			$urls = preg_split("/\r\n|\n|\r/", $value);

			$page->of(false);
			foreach($urls as $url) {
				$url = trim($url);
				// Break if the field is full
				if($remaining_uploads < 1) {
					$this->warning( sprintf($this->_('Max file upload limit reached for field "%s".'), $field_name) );
					break;
				}
				// Must be a valid URL
				if(!filter_var($url, FILTER_VALIDATE_URL)) {
					$this->error( sprintf($this->_('%s is not a valid URL.'), $url) );
					continue;
				}
				// Must have an allowed extension
				$parsed_url = parse_url($url);
				$extension = strtolower(pathinfo($parsed_url['path'], PATHINFO_EXTENSION));
				if(!in_array($extension, $allowed_extensions)) {
					$this->error( sprintf($this->_('%1$s is not an allowed extension for field "%2$s".'), $extension, $field_name) );
					continue;
				}
				// If it's a single image/file field and there's an existing image/file, remove it (as per the core upload behaviour)
				if($field->maxFiles == 1 && count($field_value)) $field_value->removeAll();
				// Create Pagefile
				if($is_image_field) {
					$pagefile = new Pageimage($field_value, $url);
					// Resize to maximum width/height if necessary
					if($field->maxWidth && $field->maxWidth < $pagefile->width || $field->maxHeight && $field->maxHeight < $pagefile->height) {
						$width = $field->maxWidth ?: 0;
						$height = $field->maxHeight ?: 0;
						if($width && $pagefile->width >= $pagefile->height) $height = 0;
						if($height && $pagefile->width < $pagefile->height) $width = 0;
						$sizer = new ImageSizer($pagefile->filename);
						$sizer->setUpscaling(false);
						$sizer->resize($width, $height);
					}
				} else {
					$pagefile = new Pagefile($field_value, $url);
				}

				// Add the Pagefile to the field
				$field_value->add($pagefile);
				// Decrement remaining uploads
				$remaining_uploads--;
			}
			// Save
			$page->save();

		}
	}

}
